/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.danmu.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-21")
public class Danmu {

  public interface Iface {

    public long getRoomNumByRoomId(int roomid) throws org.apache.thrift.TException;

    public long getDanmuNumByRoomId(int roomid) throws org.apache.thrift.TException;

    public void sendGfitDanmuToRoom(int roomid, String content, String img) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRoomNumByRoomId(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDanmuNumByRoomId(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendGfitDanmuToRoom(int roomid, String content, String img, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getRoomNumByRoomId(int roomid) throws org.apache.thrift.TException
    {
      send_getRoomNumByRoomId(roomid);
      return recv_getRoomNumByRoomId();
    }

    public void send_getRoomNumByRoomId(int roomid) throws org.apache.thrift.TException
    {
      getRoomNumByRoomId_args args = new getRoomNumByRoomId_args();
      args.setRoomid(roomid);
      sendBase("getRoomNumByRoomId", args);
    }

    public long recv_getRoomNumByRoomId() throws org.apache.thrift.TException
    {
      getRoomNumByRoomId_result result = new getRoomNumByRoomId_result();
      receiveBase(result, "getRoomNumByRoomId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoomNumByRoomId failed: unknown result");
    }

    public long getDanmuNumByRoomId(int roomid) throws org.apache.thrift.TException
    {
      send_getDanmuNumByRoomId(roomid);
      return recv_getDanmuNumByRoomId();
    }

    public void send_getDanmuNumByRoomId(int roomid) throws org.apache.thrift.TException
    {
      getDanmuNumByRoomId_args args = new getDanmuNumByRoomId_args();
      args.setRoomid(roomid);
      sendBase("getDanmuNumByRoomId", args);
    }

    public long recv_getDanmuNumByRoomId() throws org.apache.thrift.TException
    {
      getDanmuNumByRoomId_result result = new getDanmuNumByRoomId_result();
      receiveBase(result, "getDanmuNumByRoomId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDanmuNumByRoomId failed: unknown result");
    }

    public void sendGfitDanmuToRoom(int roomid, String content, String img) throws org.apache.thrift.TException
    {
      send_sendGfitDanmuToRoom(roomid, content, img);
      recv_sendGfitDanmuToRoom();
    }

    public void send_sendGfitDanmuToRoom(int roomid, String content, String img) throws org.apache.thrift.TException
    {
      sendGfitDanmuToRoom_args args = new sendGfitDanmuToRoom_args();
      args.setRoomid(roomid);
      args.setContent(content);
      args.setImg(img);
      sendBase("sendGfitDanmuToRoom", args);
    }

    public void recv_sendGfitDanmuToRoom() throws org.apache.thrift.TException
    {
      sendGfitDanmuToRoom_result result = new sendGfitDanmuToRoom_result();
      receiveBase(result, "sendGfitDanmuToRoom");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRoomNumByRoomId(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoomNumByRoomId_call method_call = new getRoomNumByRoomId_call(roomid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoomNumByRoomId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roomid;
      public getRoomNumByRoomId_call(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomid = roomid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoomNumByRoomId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoomNumByRoomId_args args = new getRoomNumByRoomId_args();
        args.setRoomid(roomid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoomNumByRoomId();
      }
    }

    public void getDanmuNumByRoomId(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDanmuNumByRoomId_call method_call = new getDanmuNumByRoomId_call(roomid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDanmuNumByRoomId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roomid;
      public getDanmuNumByRoomId_call(int roomid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomid = roomid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDanmuNumByRoomId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDanmuNumByRoomId_args args = new getDanmuNumByRoomId_args();
        args.setRoomid(roomid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDanmuNumByRoomId();
      }
    }

    public void sendGfitDanmuToRoom(int roomid, String content, String img, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendGfitDanmuToRoom_call method_call = new sendGfitDanmuToRoom_call(roomid, content, img, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendGfitDanmuToRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roomid;
      private String content;
      private String img;
      public sendGfitDanmuToRoom_call(int roomid, String content, String img, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomid = roomid;
        this.content = content;
        this.img = img;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendGfitDanmuToRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendGfitDanmuToRoom_args args = new sendGfitDanmuToRoom_args();
        args.setRoomid(roomid);
        args.setContent(content);
        args.setImg(img);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendGfitDanmuToRoom();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRoomNumByRoomId", new getRoomNumByRoomId());
      processMap.put("getDanmuNumByRoomId", new getDanmuNumByRoomId());
      processMap.put("sendGfitDanmuToRoom", new sendGfitDanmuToRoom());
      return processMap;
    }

    public static class getRoomNumByRoomId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoomNumByRoomId_args> {
      public getRoomNumByRoomId() {
        super("getRoomNumByRoomId");
      }

      public getRoomNumByRoomId_args getEmptyArgsInstance() {
        return new getRoomNumByRoomId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoomNumByRoomId_result getResult(I iface, getRoomNumByRoomId_args args) throws org.apache.thrift.TException {
        getRoomNumByRoomId_result result = new getRoomNumByRoomId_result();
        result.success = iface.getRoomNumByRoomId(args.roomid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDanmuNumByRoomId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDanmuNumByRoomId_args> {
      public getDanmuNumByRoomId() {
        super("getDanmuNumByRoomId");
      }

      public getDanmuNumByRoomId_args getEmptyArgsInstance() {
        return new getDanmuNumByRoomId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDanmuNumByRoomId_result getResult(I iface, getDanmuNumByRoomId_args args) throws org.apache.thrift.TException {
        getDanmuNumByRoomId_result result = new getDanmuNumByRoomId_result();
        result.success = iface.getDanmuNumByRoomId(args.roomid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendGfitDanmuToRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendGfitDanmuToRoom_args> {
      public sendGfitDanmuToRoom() {
        super("sendGfitDanmuToRoom");
      }

      public sendGfitDanmuToRoom_args getEmptyArgsInstance() {
        return new sendGfitDanmuToRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendGfitDanmuToRoom_result getResult(I iface, sendGfitDanmuToRoom_args args) throws org.apache.thrift.TException {
        sendGfitDanmuToRoom_result result = new sendGfitDanmuToRoom_result();
        iface.sendGfitDanmuToRoom(args.roomid, args.content, args.img);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRoomNumByRoomId", new getRoomNumByRoomId());
      processMap.put("getDanmuNumByRoomId", new getDanmuNumByRoomId());
      processMap.put("sendGfitDanmuToRoom", new sendGfitDanmuToRoom());
      return processMap;
    }

    public static class getRoomNumByRoomId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoomNumByRoomId_args, Long> {
      public getRoomNumByRoomId() {
        super("getRoomNumByRoomId");
      }

      public getRoomNumByRoomId_args getEmptyArgsInstance() {
        return new getRoomNumByRoomId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getRoomNumByRoomId_result result = new getRoomNumByRoomId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoomNumByRoomId_result result = new getRoomNumByRoomId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoomNumByRoomId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getRoomNumByRoomId(args.roomid,resultHandler);
      }
    }

    public static class getDanmuNumByRoomId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDanmuNumByRoomId_args, Long> {
      public getDanmuNumByRoomId() {
        super("getDanmuNumByRoomId");
      }

      public getDanmuNumByRoomId_args getEmptyArgsInstance() {
        return new getDanmuNumByRoomId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getDanmuNumByRoomId_result result = new getDanmuNumByRoomId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDanmuNumByRoomId_result result = new getDanmuNumByRoomId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDanmuNumByRoomId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getDanmuNumByRoomId(args.roomid,resultHandler);
      }
    }

    public static class sendGfitDanmuToRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendGfitDanmuToRoom_args, Void> {
      public sendGfitDanmuToRoom() {
        super("sendGfitDanmuToRoom");
      }

      public sendGfitDanmuToRoom_args getEmptyArgsInstance() {
        return new sendGfitDanmuToRoom_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendGfitDanmuToRoom_result result = new sendGfitDanmuToRoom_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendGfitDanmuToRoom_result result = new sendGfitDanmuToRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendGfitDanmuToRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendGfitDanmuToRoom(args.roomid, args.content, args.img,resultHandler);
      }
    }

  }

  public static class getRoomNumByRoomId_args implements org.apache.thrift.TBase<getRoomNumByRoomId_args, getRoomNumByRoomId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomNumByRoomId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomNumByRoomId_args");

    private static final org.apache.thrift.protocol.TField ROOMID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomNumByRoomId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomNumByRoomId_argsTupleSchemeFactory());
    }

    public int roomid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOMID((short)1, "roomid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOMID
            return ROOMID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOMID, new org.apache.thrift.meta_data.FieldMetaData("roomid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomNumByRoomId_args.class, metaDataMap);
    }

    public getRoomNumByRoomId_args() {
    }

    public getRoomNumByRoomId_args(
      int roomid)
    {
      this();
      this.roomid = roomid;
      setRoomidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomNumByRoomId_args(getRoomNumByRoomId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomid = other.roomid;
    }

    public getRoomNumByRoomId_args deepCopy() {
      return new getRoomNumByRoomId_args(this);
    }

    @Override
    public void clear() {
      setRoomidIsSet(false);
      this.roomid = 0;
    }

    public int getRoomid() {
      return this.roomid;
    }

    public getRoomNumByRoomId_args setRoomid(int roomid) {
      this.roomid = roomid;
      setRoomidIsSet(true);
      return this;
    }

    public void unsetRoomid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOMID:
        if (value == null) {
          unsetRoomid();
        } else {
          setRoomid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOMID:
        return getRoomid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOMID:
        return isSetRoomid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomNumByRoomId_args)
        return this.equals((getRoomNumByRoomId_args)that);
      return false;
    }

    public boolean equals(getRoomNumByRoomId_args that) {
      if (that == null)
        return false;

      boolean this_present_roomid = true;
      boolean that_present_roomid = true;
      if (this_present_roomid || that_present_roomid) {
        if (!(this_present_roomid && that_present_roomid))
          return false;
        if (this.roomid != that.roomid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roomid = true;
      list.add(present_roomid);
      if (present_roomid)
        list.add(roomid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoomNumByRoomId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomid()).compareTo(other.isSetRoomid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomid, other.roomid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomNumByRoomId_args(");
      boolean first = true;

      sb.append("roomid:");
      sb.append(this.roomid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomNumByRoomId_argsStandardSchemeFactory implements SchemeFactory {
      public getRoomNumByRoomId_argsStandardScheme getScheme() {
        return new getRoomNumByRoomId_argsStandardScheme();
      }
    }

    private static class getRoomNumByRoomId_argsStandardScheme extends StandardScheme<getRoomNumByRoomId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomNumByRoomId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOMID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomid = iprot.readI32();
                struct.setRoomidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomNumByRoomId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOMID_FIELD_DESC);
        oprot.writeI32(struct.roomid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomNumByRoomId_argsTupleSchemeFactory implements SchemeFactory {
      public getRoomNumByRoomId_argsTupleScheme getScheme() {
        return new getRoomNumByRoomId_argsTupleScheme();
      }
    }

    private static class getRoomNumByRoomId_argsTupleScheme extends TupleScheme<getRoomNumByRoomId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomNumByRoomId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomid()) {
          oprot.writeI32(struct.roomid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomNumByRoomId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomid = iprot.readI32();
          struct.setRoomidIsSet(true);
        }
      }
    }

  }

  public static class getRoomNumByRoomId_result implements org.apache.thrift.TBase<getRoomNumByRoomId_result, getRoomNumByRoomId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomNumByRoomId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomNumByRoomId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomNumByRoomId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomNumByRoomId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomNumByRoomId_result.class, metaDataMap);
    }

    public getRoomNumByRoomId_result() {
    }

    public getRoomNumByRoomId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomNumByRoomId_result(getRoomNumByRoomId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRoomNumByRoomId_result deepCopy() {
      return new getRoomNumByRoomId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getRoomNumByRoomId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomNumByRoomId_result)
        return this.equals((getRoomNumByRoomId_result)that);
      return false;
    }

    public boolean equals(getRoomNumByRoomId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoomNumByRoomId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomNumByRoomId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomNumByRoomId_resultStandardSchemeFactory implements SchemeFactory {
      public getRoomNumByRoomId_resultStandardScheme getScheme() {
        return new getRoomNumByRoomId_resultStandardScheme();
      }
    }

    private static class getRoomNumByRoomId_resultStandardScheme extends StandardScheme<getRoomNumByRoomId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomNumByRoomId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomNumByRoomId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomNumByRoomId_resultTupleSchemeFactory implements SchemeFactory {
      public getRoomNumByRoomId_resultTupleScheme getScheme() {
        return new getRoomNumByRoomId_resultTupleScheme();
      }
    }

    private static class getRoomNumByRoomId_resultTupleScheme extends TupleScheme<getRoomNumByRoomId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomNumByRoomId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomNumByRoomId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDanmuNumByRoomId_args implements org.apache.thrift.TBase<getDanmuNumByRoomId_args, getDanmuNumByRoomId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDanmuNumByRoomId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDanmuNumByRoomId_args");

    private static final org.apache.thrift.protocol.TField ROOMID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDanmuNumByRoomId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDanmuNumByRoomId_argsTupleSchemeFactory());
    }

    public int roomid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOMID((short)1, "roomid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOMID
            return ROOMID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOMID, new org.apache.thrift.meta_data.FieldMetaData("roomid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDanmuNumByRoomId_args.class, metaDataMap);
    }

    public getDanmuNumByRoomId_args() {
    }

    public getDanmuNumByRoomId_args(
      int roomid)
    {
      this();
      this.roomid = roomid;
      setRoomidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDanmuNumByRoomId_args(getDanmuNumByRoomId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomid = other.roomid;
    }

    public getDanmuNumByRoomId_args deepCopy() {
      return new getDanmuNumByRoomId_args(this);
    }

    @Override
    public void clear() {
      setRoomidIsSet(false);
      this.roomid = 0;
    }

    public int getRoomid() {
      return this.roomid;
    }

    public getDanmuNumByRoomId_args setRoomid(int roomid) {
      this.roomid = roomid;
      setRoomidIsSet(true);
      return this;
    }

    public void unsetRoomid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOMID:
        if (value == null) {
          unsetRoomid();
        } else {
          setRoomid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOMID:
        return getRoomid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOMID:
        return isSetRoomid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDanmuNumByRoomId_args)
        return this.equals((getDanmuNumByRoomId_args)that);
      return false;
    }

    public boolean equals(getDanmuNumByRoomId_args that) {
      if (that == null)
        return false;

      boolean this_present_roomid = true;
      boolean that_present_roomid = true;
      if (this_present_roomid || that_present_roomid) {
        if (!(this_present_roomid && that_present_roomid))
          return false;
        if (this.roomid != that.roomid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roomid = true;
      list.add(present_roomid);
      if (present_roomid)
        list.add(roomid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDanmuNumByRoomId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomid()).compareTo(other.isSetRoomid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomid, other.roomid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDanmuNumByRoomId_args(");
      boolean first = true;

      sb.append("roomid:");
      sb.append(this.roomid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDanmuNumByRoomId_argsStandardSchemeFactory implements SchemeFactory {
      public getDanmuNumByRoomId_argsStandardScheme getScheme() {
        return new getDanmuNumByRoomId_argsStandardScheme();
      }
    }

    private static class getDanmuNumByRoomId_argsStandardScheme extends StandardScheme<getDanmuNumByRoomId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDanmuNumByRoomId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOMID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomid = iprot.readI32();
                struct.setRoomidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDanmuNumByRoomId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOMID_FIELD_DESC);
        oprot.writeI32(struct.roomid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDanmuNumByRoomId_argsTupleSchemeFactory implements SchemeFactory {
      public getDanmuNumByRoomId_argsTupleScheme getScheme() {
        return new getDanmuNumByRoomId_argsTupleScheme();
      }
    }

    private static class getDanmuNumByRoomId_argsTupleScheme extends TupleScheme<getDanmuNumByRoomId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDanmuNumByRoomId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomid()) {
          oprot.writeI32(struct.roomid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDanmuNumByRoomId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomid = iprot.readI32();
          struct.setRoomidIsSet(true);
        }
      }
    }

  }

  public static class getDanmuNumByRoomId_result implements org.apache.thrift.TBase<getDanmuNumByRoomId_result, getDanmuNumByRoomId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDanmuNumByRoomId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDanmuNumByRoomId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDanmuNumByRoomId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDanmuNumByRoomId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDanmuNumByRoomId_result.class, metaDataMap);
    }

    public getDanmuNumByRoomId_result() {
    }

    public getDanmuNumByRoomId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDanmuNumByRoomId_result(getDanmuNumByRoomId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getDanmuNumByRoomId_result deepCopy() {
      return new getDanmuNumByRoomId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getDanmuNumByRoomId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDanmuNumByRoomId_result)
        return this.equals((getDanmuNumByRoomId_result)that);
      return false;
    }

    public boolean equals(getDanmuNumByRoomId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDanmuNumByRoomId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDanmuNumByRoomId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDanmuNumByRoomId_resultStandardSchemeFactory implements SchemeFactory {
      public getDanmuNumByRoomId_resultStandardScheme getScheme() {
        return new getDanmuNumByRoomId_resultStandardScheme();
      }
    }

    private static class getDanmuNumByRoomId_resultStandardScheme extends StandardScheme<getDanmuNumByRoomId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDanmuNumByRoomId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDanmuNumByRoomId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDanmuNumByRoomId_resultTupleSchemeFactory implements SchemeFactory {
      public getDanmuNumByRoomId_resultTupleScheme getScheme() {
        return new getDanmuNumByRoomId_resultTupleScheme();
      }
    }

    private static class getDanmuNumByRoomId_resultTupleScheme extends TupleScheme<getDanmuNumByRoomId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDanmuNumByRoomId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDanmuNumByRoomId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendGfitDanmuToRoom_args implements org.apache.thrift.TBase<sendGfitDanmuToRoom_args, sendGfitDanmuToRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendGfitDanmuToRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendGfitDanmuToRoom_args");

    private static final org.apache.thrift.protocol.TField ROOMID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendGfitDanmuToRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendGfitDanmuToRoom_argsTupleSchemeFactory());
    }

    public int roomid; // required
    public String content; // required
    public String img; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOMID((short)1, "roomid"),
      CONTENT((short)2, "content"),
      IMG((short)3, "img");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOMID
            return ROOMID;
          case 2: // CONTENT
            return CONTENT;
          case 3: // IMG
            return IMG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOMID, new org.apache.thrift.meta_data.FieldMetaData("roomid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendGfitDanmuToRoom_args.class, metaDataMap);
    }

    public sendGfitDanmuToRoom_args() {
    }

    public sendGfitDanmuToRoom_args(
      int roomid,
      String content,
      String img)
    {
      this();
      this.roomid = roomid;
      setRoomidIsSet(true);
      this.content = content;
      this.img = img;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendGfitDanmuToRoom_args(sendGfitDanmuToRoom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomid = other.roomid;
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetImg()) {
        this.img = other.img;
      }
    }

    public sendGfitDanmuToRoom_args deepCopy() {
      return new sendGfitDanmuToRoom_args(this);
    }

    @Override
    public void clear() {
      setRoomidIsSet(false);
      this.roomid = 0;
      this.content = null;
      this.img = null;
    }

    public int getRoomid() {
      return this.roomid;
    }

    public sendGfitDanmuToRoom_args setRoomid(int roomid) {
      this.roomid = roomid;
      setRoomidIsSet(true);
      return this;
    }

    public void unsetRoomid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public String getContent() {
      return this.content;
    }

    public sendGfitDanmuToRoom_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getImg() {
      return this.img;
    }

    public sendGfitDanmuToRoom_args setImg(String img) {
      this.img = img;
      return this;
    }

    public void unsetImg() {
      this.img = null;
    }

    /** Returns true if field img is set (has been assigned a value) and false otherwise */
    public boolean isSetImg() {
      return this.img != null;
    }

    public void setImgIsSet(boolean value) {
      if (!value) {
        this.img = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOMID:
        if (value == null) {
          unsetRoomid();
        } else {
          setRoomid((Integer)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case IMG:
        if (value == null) {
          unsetImg();
        } else {
          setImg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOMID:
        return getRoomid();

      case CONTENT:
        return getContent();

      case IMG:
        return getImg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOMID:
        return isSetRoomid();
      case CONTENT:
        return isSetContent();
      case IMG:
        return isSetImg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendGfitDanmuToRoom_args)
        return this.equals((sendGfitDanmuToRoom_args)that);
      return false;
    }

    public boolean equals(sendGfitDanmuToRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_roomid = true;
      boolean that_present_roomid = true;
      if (this_present_roomid || that_present_roomid) {
        if (!(this_present_roomid && that_present_roomid))
          return false;
        if (this.roomid != that.roomid)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_img = true && this.isSetImg();
      boolean that_present_img = true && that.isSetImg();
      if (this_present_img || that_present_img) {
        if (!(this_present_img && that_present_img))
          return false;
        if (!this.img.equals(that.img))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roomid = true;
      list.add(present_roomid);
      if (present_roomid)
        list.add(roomid);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_img = true && (isSetImg());
      list.add(present_img);
      if (present_img)
        list.add(img);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendGfitDanmuToRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomid()).compareTo(other.isSetRoomid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomid, other.roomid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendGfitDanmuToRoom_args(");
      boolean first = true;

      sb.append("roomid:");
      sb.append(this.roomid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendGfitDanmuToRoom_argsStandardSchemeFactory implements SchemeFactory {
      public sendGfitDanmuToRoom_argsStandardScheme getScheme() {
        return new sendGfitDanmuToRoom_argsStandardScheme();
      }
    }

    private static class sendGfitDanmuToRoom_argsStandardScheme extends StandardScheme<sendGfitDanmuToRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendGfitDanmuToRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOMID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomid = iprot.readI32();
                struct.setRoomidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IMG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.img = iprot.readString();
                struct.setImgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendGfitDanmuToRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOMID_FIELD_DESC);
        oprot.writeI32(struct.roomid);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.img != null) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendGfitDanmuToRoom_argsTupleSchemeFactory implements SchemeFactory {
      public sendGfitDanmuToRoom_argsTupleScheme getScheme() {
        return new sendGfitDanmuToRoom_argsTupleScheme();
      }
    }

    private static class sendGfitDanmuToRoom_argsTupleScheme extends TupleScheme<sendGfitDanmuToRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendGfitDanmuToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomid()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetImg()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoomid()) {
          oprot.writeI32(struct.roomid);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetImg()) {
          oprot.writeString(struct.img);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendGfitDanmuToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roomid = iprot.readI32();
          struct.setRoomidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.img = iprot.readString();
          struct.setImgIsSet(true);
        }
      }
    }

  }

  public static class sendGfitDanmuToRoom_result implements org.apache.thrift.TBase<sendGfitDanmuToRoom_result, sendGfitDanmuToRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendGfitDanmuToRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendGfitDanmuToRoom_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendGfitDanmuToRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendGfitDanmuToRoom_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendGfitDanmuToRoom_result.class, metaDataMap);
    }

    public sendGfitDanmuToRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendGfitDanmuToRoom_result(sendGfitDanmuToRoom_result other) {
    }

    public sendGfitDanmuToRoom_result deepCopy() {
      return new sendGfitDanmuToRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendGfitDanmuToRoom_result)
        return this.equals((sendGfitDanmuToRoom_result)that);
      return false;
    }

    public boolean equals(sendGfitDanmuToRoom_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendGfitDanmuToRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendGfitDanmuToRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendGfitDanmuToRoom_resultStandardSchemeFactory implements SchemeFactory {
      public sendGfitDanmuToRoom_resultStandardScheme getScheme() {
        return new sendGfitDanmuToRoom_resultStandardScheme();
      }
    }

    private static class sendGfitDanmuToRoom_resultStandardScheme extends StandardScheme<sendGfitDanmuToRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendGfitDanmuToRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendGfitDanmuToRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendGfitDanmuToRoom_resultTupleSchemeFactory implements SchemeFactory {
      public sendGfitDanmuToRoom_resultTupleScheme getScheme() {
        return new sendGfitDanmuToRoom_resultTupleScheme();
      }
    }

    private static class sendGfitDanmuToRoom_resultTupleScheme extends TupleScheme<sendGfitDanmuToRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendGfitDanmuToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendGfitDanmuToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
